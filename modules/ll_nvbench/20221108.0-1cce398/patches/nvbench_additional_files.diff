diff --git a/nvbench/config.cuh b/nvbench/config.cuh
new file mode 100644
index 0000000..591f88f
--- /dev/null
+++ b/nvbench/config.cuh
@@ -0,0 +1,52 @@
+/*
+ *  Copyright 2021 NVIDIA Corporation
+ *
+ *  Licensed under the Apache License, Version 2.0 with the LLVM exception
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.
+ *
+ *  You may obtain a copy of the License at
+ *
+ *      http://llvm.org/foundation/relicensing/LICENSE.txt
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+
+#pragma once
+
+// Defined if NVBench has been built with NVML support.
+// #define NVBENCH_HAS_NVML
+
+// Defined if NVBench has been built with CUPTI support.
+#define NVBENCH_HAS_CUPTI
+
+#ifdef _MSC_VER
+#define NVBENCH_MSVC_PUSH_DISABLE_WARNING(code)                                                    \
+  __pragma(warning(push)) __pragma(warning(disable : code))
+#define NVBENCH_MSVC_POP_WARNING() __pragma(warning(pop))
+#else
+#define NVBENCH_MSVC_PUSH_DISABLE_WARNING(code)
+#define NVBENCH_MSVC_POP_WARNING()
+#endif
+
+// MSVC does not define __cplusplus correctly. _MSVC_LANG is used instead.
+#ifdef _MSVC_LANG
+#define NVBENCH_CPLUSPLUS _MSVC_LANG
+#else
+#define NVBENCH_CPLUSPLUS __cplusplus
+#endif
+
+// Detect current dialect:
+#if NVBENCH_CPLUSPLUS < 201703L
+#error "NVBench requires a C++17 compiler."
+#elif NVBENCH_CPLUSPLUS < 202002L
+#define NVBENCH_CPP_DIALECT 2017
+#elif NVBENCH_CPLUSPLUS == 202002L
+#define NVBENCH_CPP_DIALECT 2020
+#elif NVBENCH_CPLUSPLUS > 202002L // unknown, but is higher than C++20.
+#define NVBENCH_CPP_DIALECT 2023
+#endif
diff --git a/nvbench/detail/git_revision.cuh b/nvbench/detail/git_revision.cuh
new file mode 100644
index 0000000..1c04afc
--- /dev/null
+++ b/nvbench/detail/git_revision.cuh
@@ -0,0 +1,5 @@
+#pragma once
+
+#define NVBench_GIT_BRANCH "main"
+#define NVBench_GIT_SHA1 "1cce398"
+#define NVBench_GIT_VERSION "20221108.0-1cce398"
diff --git a/nvbench/internal/cli_help.cuh b/nvbench/internal/cli_help.cuh
new file mode 100644
index 0000000..acce8d7
--- /dev/null
+++ b/nvbench/internal/cli_help.cuh
@@ -0,0 +1,151 @@
+#include <string>
+namespace  {
+const std::string cli_help_text =
+R"expected(# Queries
+
+* `--list`, `-l`
+  * List all devices and benchmarks without running them.
+
+* `--help`, `-h`
+  * Print usage information and exit.
+
+* `--help-axes`, `--help-axis`
+  * Print axis specification documentation and exit.
+
+* `--version`
+  * Print information about the version of NVBench used to build the executable.
+
+# Device Modification
+
+* `--persistence-mode <state>`, `--pm <state>`
+  * Sets persistence mode for one or more GPU devices.
+  * Applies to the devices described by the most recent `--devices` option,
+    or all devices if `--devices` is not specified.
+  * This option requires root / admin permissions.
+  * This option is only supported on Linux.
+  * This call must precede all other device modification options, if any.
+  * Note that persistence mode is deprecated and will be removed at some point
+    in favor of the new persistence daemon. See the following link for more
+    details: https://docs.nvidia.com/deploy/driver-persistence/index.html
+  * Valid values for `state` are:
+    * `0`: Disable persistence mode.
+    * `1`: Enable persistence mode.
+
+* `--lock-gpu-clocks <rate>`, `--lgc <rate>`
+  * Lock GPU clocks for one or more devices to a particular rate.
+  * Applies to the devices described by the most recent `--devices` option,
+    or all devices if `--devices` is not specified.
+  * This option requires root / admin permissions.
+  * This option is only supported in Volta+ (sm_70+) devices.
+  * Valid values for `rate` are:
+    * `reset`, `unlock`, `none`: Unlock the GPU clocks.
+    * `base`, `tdp`: Lock clocks to base frequency (best for stable results).
+    * `max`, `maximum`: Lock clocks to max frequency (best for fastest results).
+
+# Output
+
+* `--csv <filename/stream>`
+  * Write CSV output to a file, or "stdout" / "stderr".
+
+* `--json <filename/stream>`
+  * Write JSON output to a file, or "stdout" / "stderr".
+
+* `--markdown <filename/stream>`, `--md <filename/stream>`
+  * Write markdown output to a file, or "stdout" / "stderr".
+  * Markdown is written to "stdout" by default.
+
+* `--quiet`, `-q`
+  * Suppress output.
+
+* `--color`
+  * Use color in output (markdown + stdout only).
+
+# Benchmark / Axis Specification
+
+* `--benchmark <benchmark name/index>`, `-b <benchmark name/index>`
+  * Execute a specific benchmark.
+  * Argument is a benchmark name or index, taken from `--list`.
+  * If not specified, all benchmarks will run.
+  * `--benchmark` may be specified multiple times to run several benchmarks.
+  * The same benchmark may be specified multiple times with different
+    configurations.
+
+* `--axis <axis specification>`, `-a <axis specification>`
+  * Override an axis specification.
+  * See `--help-axis`
+    for [details on axis specifications](./cli_help_axis.md).
+  * Applies to the most recent `--benchmark`, or all benchmarks if specified
+    before any `--benchmark` arguments.
+
+# Benchmark Properties
+
+* `--devices <device ids>`, `--device <device ids>`, `-d <device ids>`
+  * Limit execution to one or more devices.
+  * `<device ids>` is a single id, a comma separated list, or the string "all".
+  * Device ids can be obtained from `--list`.
+  * Applies to the most recent `--benchmark`, or all benchmarks if specified
+    before any `--benchmark` arguments.
+
+* `--min-samples <count>`
+  * Gather at least `<count>` samples per measurement.
+  * Default is 10 samples.
+  * Applies to the most recent `--benchmark`, or all benchmarks if specified
+    before any `--benchmark` arguments.
+
+* `--min-time <seconds>`
+  * Accumulate at least `<seconds>` of execution time per measurement.
+  * Default is 0.5 seconds.
+  * If both GPU and CPU times are gathered, this applies to GPU time only.
+  * Applies to the most recent `--benchmark`, or all benchmarks if specified
+    before any `--benchmark` arguments.
+
+* `--max-noise <value>`
+  * Gather samples until the error in the measurement drops below `<value>`.
+  * Noise is specified as the percent relative standard deviation.
+  * Default is 0.5% (`--max-noise 0.5`)
+  * Only applies to Cold measurements.
+  * If both GPU and CPU times are gathered, this applies to GPU noise only.
+  * Applies to the most recent `--benchmark`, or all benchmarks if specified
+    before any `--benchmark` arguments.
+
+* `--skip-time <seconds>`
+  * Skip a measurement when a warmup run executes in less than `<seconds>`.
+  * Default is -1 seconds (disabled).
+  * Intended for testing / debugging only.
+  * Very fast kernels (<5us) often require an extremely large number of samples
+    to converge `max-noise`. This option allows them to be skipped to save time
+    during testing.
+  * Applies to the most recent `--benchmark`, or all benchmarks if specified
+    before any `--benchmark` arguments.
+
+* `--timeout <seconds>`
+  * Measurements will timeout after `<seconds>` have elapsed.
+  * Default is 15 seconds.
+  * `<seconds>` is walltime, not accumulated sample time.
+  * If a measurement times out, the default markdown log will print a warning to
+    report any outstanding termination criteria (min samples, min time, max
+    noise).
+  * Applies to the most recent `--benchmark`, or all benchmarks if specified
+    before any `--benchmark` arguments.
+
+* `--run-once`
+  * Only run the benchmark once, skipping any warmup runs and batched
+    measurements.
+  * Intended for use with external profiling tools.
+  * Applies to the most recent `--benchmark`, or all benchmarks if specified
+    before any `--benchmark` arguments.
+
+* `--disable-blocking-kernel`
+  * Don't use the `blocking_kernel`.
+  * Intended for use with external profiling tools.
+  * Applies to the most recent `--benchmark`, or all benchmarks if specified
+    before any `--benchmark` arguments.
+
+* `--profile`
+  * Implies `--run-once` and `--disable-blocking-kernel`.
+  * Intended for use with external profiling tools.
+  * Applies to the most recent `--benchmark`, or all benchmarks if specified
+    before any `--benchmark` arguments.
+)expected";
+}
+
diff --git a/nvbench/internal/cli_help_axis.cuh b/nvbench/internal/cli_help_axis.cuh
new file mode 100644
index 0000000..99d61e7
--- /dev/null
+++ b/nvbench/internal/cli_help_axis.cuh
@@ -0,0 +1,75 @@
+#include <string>
+namespace  {
+const std::string cli_help_axis_text =
+R"expected(# Axis Specification
+
+The `--axis <axis spec>` option redefines the values in a benchmark's axis. It
+applies to the benchmark created by the most recent `--benchmark` argument, or
+all benchmarks if it precedes all `--benchmark` arguments (if any).
+
+Valid axis specification follow the form:
+
+* `<axis_name>=<value>`
+* `<axis_name>=[<value1>,<value2>,...]`
+* `<axis_name>=[<start>:<stop>]`
+* `<axis_name>=[<start>:<stop>:<stride>]`
+* `<axis_name>[<flags>]=<value>`
+* `<axis_name>[<flags>]=[<value1>,<value2>,...]`
+* `<axis_name>[<flags>]=[<start>:<stop>]`
+* `<axis_name>[<flags>]=[<start>:<stop>:<stride>]`
+
+Whitespace is ignored if the argument is quoted.
+
+The axis type is taken from the benchmark definition. Some axes have additional
+restrictions:
+
+* Numeric axes:
+  * A single value, explicit list of values, or strided range may be specified.
+  * For `int64` axes, the `power_of_two` flag is specified by adding `[pow2]`
+    after the axis name.
+  * Values may differ from those defined in the benchmark.
+* String axes:
+  * A single value or explicit list of values may be specified.
+  * Values may differ from those defined in the benchmark.
+* Type axes:
+  * A single value or explicit list of values may be specified.
+  * Values **MUST** be a subset of the types defined in the benchmark.
+  * Values **MUST** match the input strings provided by `--list` (e.g. `I32`
+    for `int`).
+  * Provide a `nvbench::type_strings<T>` specialization to modify a custom
+    type's input string.
+
+# Examples
+
+## Single Value
+
+| Axis Type | Example                 | Example Result   |
+|-----------|-------------------------|------------------|
+| Int64     | `-a InputSize=12345`    | 12345            |
+| Int64Pow2 | `-a InputSize[pow2]=8`  | 256              |
+| Float64   | `-a Quality=0.5`        | 0.5              |
+| String    | `-a RNG=Uniform`        | "Uniform"        |
+| Type      | `-a ValueType=I32`      | `int32_t`        |
+
+## Explicit List
+
+| Axis Type | Example                         | Example Result                 |
+|-----------|---------------------------------|--------------------------------|
+| Int64     | `-a InputSize=[1,2,3,4,5]`      | 1, 2, 3, 4, 5                  |
+| Int64Pow2 | `-a InputSize[pow2]=[4,6,8,10]` | 16, 64, 256, 1024              |
+| Float64   | `-a Quality=[0.5,0.75,1.0]`     | 0.5, 0.75, 1.0                 |
+| String    | `-a RNG=[Uniform,Gaussian]`     | "Uniform", "Gaussian"          |
+| Type      | `-a ValueType=[U8,I32,F64]`     | `uint8_t`, `int32_t`, `double` |
+
+## Strided Range
+
+| Axis Type | Example                         | Example Result               |
+|-----------|---------------------------------|------------------------------|
+| Int64     | `-a InputSize=[2:10:2]`         | 2, 4, 6, 8, 10               |
+| Int64Pow2 | `-a InputSize[pow2]=[2:10:2]`   | 4, 16, 64, 256, 1024         |
+| Float64   | `-a Quality=[.5:1:.1]`          | 0.5, 0.6, 0.7, 0.8, 0.9, 1.0 |
+| String    | [Not supported]                 |                              |
+| Type      | [Not supported]                 |                              |
+)expected";
+}
+
diff --git a/nvbench/version.cuh b/nvbench/version.cuh
index 69e92e5..897482d 100644
--- a/nvbench/version.cuh
+++ b/nvbench/version.cuh
@@ -1,36 +1,20 @@
 /*
- *  Copyright 2021 NVIDIA Corporation
+ * Copyright (c) 2021, NVIDIA CORPORATION.
  *
- *  Licensed under the Apache License, Version 2.0 with the LLVM exception
- *  (the "License"); you may not use this file except in compliance with
- *  the License.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
  *
- *  You may obtain a copy of the License at
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
- *      http://llvm.org/foundation/relicensing/LICENSE.txt
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
  */
-
 #pragma once
 
-#include <nvbench/detail/version.cuh>
-
-// WAR issue rapidsai/rapids-cmake#99
-#define NVBENCH_VERSION_MAJOR NVBench_VERSION_MAJOR
-#define NVBENCH_VERSION_MINOR NVBench_VERSION_MINOR
-#define NVBENCH_VERSION_PATCH NVBench_VERSION_PATCH
-
-// clang-format off
-
-/// Numeric version as "MMmmpp"
-#define NVBENCH_VERSION \
-  NVBENCH_VERSION_MAJOR * 10000 + \
-  NVBENCH_VERSION_MINOR * 100+ \
-  NVBENCH_VERSION_PATCH
-
-// clang-format on
+#define NVBENCH_VERSION_MAJOR 0
+#define NVBENCH_VERSION_MINOR 1
+#define NVBENCH_VERSION_PATCH 0
